generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー関連
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  password          String
  firstName         String?
  lastName          String?
  role              UserRole  @default(USER)
  isActive          Boolean   @default(true)
  stripeCustomerId  String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  chatTrees         ChatTree[]
  purchases         Purchase[]
  messageLog        MessageLog[]
  supports          Support[]
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// チャット関連
model ChatTree {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id])
  nodes       ChatNode[]
}

model ChatNode {
  id          String   @id @default(cuid())
  treeId      String
  parentId    String?
  role        String   // 'user' or 'assistant'
  content     String   @db.Text
  metadata    Json?
  order       Int
  createdAt   DateTime @default(now())

  tree        ChatTree @relation(fields: [treeId], references: [id], onDelete: Cascade)
}

// 決済関連
model Purchase {
  id              String   @id @default(cuid())
  userId          String
  stripePaymentId String   @unique
  amount          Int
  currency        String   @default("jpy")
  status          String
  planType        String?
  metadata        Json?
  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id])
}

// コンテンツ関連
model Manual {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  category    String?
  order       Int      @default(0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model News {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  excerpt     String?
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  category  String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ログ・設定関連
model MessageLog {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  content   String   @db.Text
  metadata  Json?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefererLog {
  id        String   @id @default(cuid())
  url       String
  referer   String?
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
}

// サポート関連
model Support {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  message     String   @db.Text
  status      String   @default("open")
  priority    String   @default("normal")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  attachments Attachment[]
}

model Attachment {
  id        String   @id @default(cuid())
  supportId String?
  filename  String
  url       String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())

  support   Support? @relation(fields: [supportId], references: [id])
}

model Preview {
  id        String   @id @default(cuid())
  type      String   // 'introduction', 'manual', etc
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  PREMIUM
  PARTNER
  ADMIN
}